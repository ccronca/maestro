// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x8f\x1b\xb9\x0d\x7f\xf7\xa7\x20\xd0\x16\x4e\x0e\x5e\xdb\xe9\x5d\x81\xd6\x48\x0e\x48\x8a\x4b\x71\x87\x5c\x92\x66\x93\xf6\xa1\x28\x76\x69\x89\xe3\xd1\x65\x46\x9a\x48\x9c\xcd\x3a\x6d\xbf\x7b\x21\x69\xfe\x7b\xec\xf5\x06\xc9\x79\x2f\x48\x5e\xe2\xd1\x90\x14\x7f\x14\xf9\x13\xa5\x59\x53\x90\xc6\x42\xad\xe0\xdb\xf9\x72\xbe\x9c\x28\x9d\x98\xd5\x04\x80\x15\x67\xb4\x82\x1c\xc9\xb1\x35\x70\x4e\xf6\x4a\x09\x82\xc7\x2f\x7f\x9c\x00\x48\x72\xc2\xaa\x82\x95\xd1\xfb\x44\xae\xc8\xba\xf0\x7a\x39\x5f\xce\x1f\x4c\x1c\x59\x3f\xe2\x2d\x9f\x41\x69\xb3\x15\xa4\xcc\xc5\x6a\xb1\xc8\x8c\xc0\x2c\x35\x8e\x57\x7f\x5e\x2e\x97\x13\x80\x81\x75\x51\x5a\x4b\x9a\x41\x9a\x1c\x95\xee\xab\xbb\xd5\x62\x81\x85\x9a\x7b\x08\x2e\x55\x09\xcf\x85\xc9\x77\x4d\xfc\x8c\x4a\xc3\xbd\xc2\x1a\x59\x0a\x3f\x72\x1f\xa2\x37\xe3\xc6\x1c\xe3\x86\x6e\x32\x79\xce\xb8\x51\x7a\x53\x1b\x2a\x90\xd3\x80\xcd\x5b\x58\x54\x01\x59\x5c\x3d\x58\x58\x72\xa6\xb4\x82\xc2\x4b\x80\x0d\x71\xfc\x01\xe0\xca\x3c\x47\xbb\x5d\xc1\x2b\xe2\xd2\x6a\x07\x08\x99\x72\x0c\x26\x81\x46\xa9\x16\x25\x51\x5a\xc5\xdb\x5a\xd5\xbb\xfd\x84\xd0\x92\x5d\xc1\xbf\xfe\x5d\x0d\x5a\x72\x85\xd1\xae\x9e\xc9\xff\x9b\xfe\x71\xb9\x9c\xb6\x8f\x03\x08\x8f\xe1\xa7\xf3\x17\xcf\x01\xad\xc5\x6d\x77\x56\x30\xeb\x5f\x48\xb0\xeb\xe8\x09\xa3\x99\x34\x77\x4d\x01\x60\x51\x64\x4a\xa0\x37\xb6\xf8\xc5\x19\xdd\x7f\x0b\xe0\x44\x4a\x39\x0e\x47\x01\x7e\x6f\x29\x59\xc1\xf4\x77\x0b\x61\xf2\xc2\x68\xd2\xec\x16\x51\xd6\x2d\x5e\x55\x3e\x3c\x53\x8e\xa7\x2d\x8e\xef\x96\x0f\x0e\xe0\x28\x39\x05\x36\x6f\x49\x83\x72\xa0\xf4\x15\x66\x4a\x9e\xc2\xf9\x1f\xac\x35\xb6\xe7\xf5\xb7\xfb\xbd\x7e\xa3\xb1\xe4\xd4\x58\xf5\x81\x24\xb0\x81\x82\x6c\x62\x6c\x0e\xa6\x20\x1b\xdc\xba\x0b\x08\xfe\x74\x28\x7f\xde\x68\xba\x2e\x48\x30\x49\x20\xaf\x07\x46\x84\x5a\x3d\x7d\xec\x0b\xb4\x98\x13\x57\x74\x03\xa1\x5e\xc6\x94\x5b\xb9\x45\x81\x1b\x9a\x1e\x2b\xec\xd4\x87\x5b\x08\x13\x5a\x91\x1e\x2d\x6e\xac\x24\xfb\x64\x7b\xb4\x7c\xa2\x28\x93\x2e\x8a\x17\x9e\x45\x87\xf4\xf2\x57\x4b\xc8\x04\x08\x9a\xde\x37\x35\x7e\x3b\x62\x79\x57\x92\xe3\x27\x46\x76\xe4\x7a\x99\x50\x57\x2d\x48\x64\x6c\x44\xbc\x9e\xb2\x24\x57\xc0\xb6\xa4\xc9\x81\x94\x38\x9c\x10\xe3\xe9\x70\x0c\x8b\x4c\x0f\x52\xe3\x01\x4a\x89\x31\x3b\x49\x22\x0f\x7d\x0f\x3c\x72\xa0\x0a\xff\xe1\xd9\x2e\xb8\x10\xab\xd0\xdd\x9d\x32\xfc\x4a\xdc\x27\x44\xf0\x97\xfd\x08\x9a\x72\xc5\xcc\x12\xca\x2d\xd0\xb5\x72\xa7\xd9\xef\x6f\xb5\xe1\x3c\xd6\x50\xee\xdb\x73\x40\xf8\x92\xf5\x1d\x19\xa7\x34\xa4\xb9\xd3\x40\xda\xdb\x0a\x2e\xfe\xa3\xe4\xff\xf6\xf7\x83\x7f\x23\x06\xd4\x6d\x3b\xb6\xde\x42\x53\x16\x9f\xa7\x13\x6c\x12\x22\x31\xa5\x96\xbd\x09\x7f\xd5\xd0\x8d\x72\xdf\x57\x02\x39\x0d\x82\xef\xf6\x23\x78\x6e\xda\xec\x7c\xaf\x38\x05\x57\x90\x50\x89\x22\x09\x4a\xfe\x56\xd8\xe4\xae\xb6\xaf\x05\xb2\x48\x77\x48\xe1\x4d\x21\x43\x17\xa7\x3f\x53\x0b\x17\xed\xcb\x76\x5d\xef\x58\x2b\xf7\xd2\x47\xe5\x55\x84\x71\xb8\xad\x3b\x86\xe7\xca\x0a\xad\x2b\x85\x20\xe7\x92\x32\xcb\xb6\x77\x86\xf0\xbe\x36\x7b\xbf\xb2\xd7\x5f\xb9\xfa\x4e\x80\xf8\x02\x3b\xd6\x9d\x3d\x26\x10\x8f\xef\x52\xef\x44\x87\xba\x7b\x53\x72\xe3\x75\x83\x92\xd3\x49\xfb\xc6\x2b\xd5\x1b\xd0\xb9\xb7\x5e\x73\x71\xb5\x03\x55\x6e\xf1\xb6\xa0\x78\xc7\x3a\xe9\x78\x4d\x2b\x58\x07\xb1\x6a\x30\x3e\x3c\x35\x36\x47\x5e\xc1\x4f\xff\x7c\x3d\xa9\xe1\x55\x46\x5f\x84\x7b\xc9\x57\x94\x90\x25\x2d\xa8\x6f\x3d\x5e\x5a\x56\x43\x85\xf5\x05\xca\xaa\xbb\x35\x28\xd9\x8d\x52\x54\x72\x6c\x95\xde\x34\xc3\x6f\x95\xbe\x59\x28\xf5\x01\x3a\x24\xf4\x4c\xb5\xb7\x30\x47\xfa\x76\xd4\xc4\x05\x6e\x68\x57\x48\x69\xa6\x4d\x13\x43\x00\xa7\x3e\x1c\x21\xc5\x86\x31\xbb\x49\xac\xd9\xf5\x3b\xad\x85\xf7\xb4\xf3\xe8\x7d\xea\x3c\xfa\xc9\x3b\x8f\x61\x96\xce\xb3\x62\xca\x63\xd1\x86\x14\xac\xed\x62\x96\xbd\x48\x0e\xdf\xd4\xd5\xa9\x3b\x48\x81\xf6\x96\x6c\x24\xd0\xe3\xa1\xf6\x75\x26\xa9\x5f\x30\xa3\xe1\xf6\xf8\x71\xa7\xe2\xf6\x88\x36\xfb\xc1\x45\x3f\xcd\x46\x14\x02\xf4\x6e\x8e\xdc\x02\x7e\xf7\x5a\xfc\x56\x98\x43\xe4\xc7\x1c\x0b\xb7\xff\xbd\xf1\x11\xd1\xa3\xe9\xa4\xe6\xe9\x93\xad\xac\x76\x65\x4e\xf6\xe6\x45\x88\xff\xea\x4f\x54\x23\xb2\xc3\x82\x81\x78\xc1\x40\xf2\x02\xf9\x28\xdb\x00\x49\xc5\x64\xbe\xd5\x3c\x63\x95\x77\xb9\xbe\x6a\x40\x3f\x8d\xb1\x1c\xb5\x4a\xc8\x8d\x9a\xea\xc4\xad\xfb\x6d\xe5\x4b\xc9\xbd\x7e\x03\x3d\x76\x58\xb8\x25\x13\x8f\xc5\x72\xa0\x3a\xdc\x33\xdb\x64\xd3\xe8\x37\xb5\xa6\xad\x55\x7a\xe5\x4f\x73\x69\xf5\xd8\xeb\x0c\x5e\xa7\xe4\xfb\xaf\xf0\xd9\x4d\x18\x2b\x87\x94\xdb\x3d\x68\x0d\xf7\xf8\x9d\x24\xe9\xee\x0c\xd1\x87\x0e\x2f\x7b\x2f\xde\x95\x64\xb7\x63\x6e\xbc\xc4\x0d\x81\x2e\xf3\x35\xd9\xd6\x97\xf8\x1d\xf2\x7d\x4a\xba\x37\x40\xd7\x82\x48\xba\x4e\x03\xe9\x67\xe9\x72\xfe\xb8\xa3\xc3\x52\x92\x94\x60\x99\xf1\x0a\x1e\xb4\x51\x57\x5a\xe5\x65\xde\x0e\xb5\x71\x48\x30\x73\xd1\x7e\x77\x67\x8b\x28\x3b\x53\x1f\x44\xf9\x33\x5e\x7b\xf3\x3b\x40\x9d\x6f\xe9\x6d\xf8\xfc\xfa\x91\x08\xaa\x0f\xd6\x3d\x0c\xcb\x43\x18\xc2\xc7\xa0\x01\x8a\x30\xb6\x07\xc7\x98\x91\x01\xba\xff\x9e\x35\x3e\x9c\x57\x4b\xe3\xc2\x2d\x68\x34\x0c\xc2\x2a\x26\xab\x70\x1e\x92\xce\x6d\x35\xe3\xb5\x8f\x01\xa7\xca\xb5\xc9\x0c\xca\x75\x7a\x88\x5c\x65\x68\x7d\x74\x78\xa0\x42\x70\xf1\x3e\x25\x4b\x17\x20\x32\x2c\x1d\xf9\x51\xd4\x70\xfe\xf7\x67\xe0\x18\x99\x72\xd2\x3c\x6b\x0c\x95\xae\xbe\x91\xf5\x50\x5d\x6d\xc2\x37\xb2\x80\xcc\x56\xad\x4b\x26\x07\x0b\x10\x26\x2b\x73\xdd\x97\x42\x21\x4c\xa9\x79\x0e\x8d\xb9\xa7\xc6\x02\x5d\x63\x5e\x64\x34\x03\xa5\x21\x7c\x2b\xab\xd6\xd0\x2a\xba\xf2\xe7\x83\xac\xab\xeb\xe2\x91\x07\xa1\x74\x64\xbd\xf1\x16\x22\xa3\x0d\x8d\x78\x10\xb8\xcc\xb7\x97\xab\x49\xf3\xf2\xf2\xf2\xd2\xbd\xcb\x3a\x28\xa2\x32\x64\xea\x2d\xc1\x34\xdf\xfe\x61\xda\x15\x6d\xf5\x5e\xef\x06\x1d\x04\x6a\xc0\xcc\x19\x58\x53\x6c\xe6\x49\x82\xf1\x85\x95\xf5\xee\x5b\xe6\x1f\x01\xd2\x95\xeb\x26\x0d\x1c\x64\xb8\xa6\x8c\xc2\xed\xed\x65\x62\xcc\xa3\x35\xda\xcb\xd9\x5e\x4c\x5d\xdd\x8b\xa0\xea\xe6\x6f\x69\x0b\x8f\x60\x9a\x18\x33\x05\xd4\x72\x54\xe6\x0a\xb3\x92\xbc\xd4\x1a\xed\x9e\x28\xfc\x18\x97\xaf\x9b\x59\x7a\xca\x9e\x6d\xaf\x94\x24\x39\x03\x63\x41\x45\x99\x68\x4d\x39\xa0\xbc\xe0\xed\xcc\x8f\xb5\x27\xea\x9d\xb5\xe4\x14\x39\x8c\xf8\x05\x81\x14\x9d\x3f\x8e\xe7\xca\xf9\x3d\xdc\x07\xc8\x91\x3f\xe2\x66\x19\xac\xdb\x75\x8e\xd5\x4d\x72\x7e\x2c\x97\x56\xdf\x5f\xfb\x25\x5a\x0d\x7e\x86\x1a\x8d\xab\xbb\xde\x7e\xf2\x2a\xad\x0d\x1f\x57\xa8\xeb\x92\x6f\x5d\xac\x83\x32\xbd\x65\x02\x37\xab\x1a\x5e\xc7\xbc\xad\x0b\xed\x88\x52\x44\x27\xc6\xb3\xef\x85\xfd\xb8\x39\xe1\x02\xb5\xbc\x80\x44\x59\xc7\x70\xbc\x13\xb3\xa8\xf1\xfc\xa0\x4f\x9f\xaa\x22\xb4\x01\xba\x2e\x32\x25\x14\x47\x08\x91\xc0\x42\xc6\xd7\xe4\x72\x74\xa2\xc7\x3f\x1c\xe8\xe7\x79\x1c\xfb\x34\x69\x5e\x06\x7f\x1c\x20\x08\x93\xe7\x78\xe6\xc8\xe3\xf7\x9c\x57\xff\x99\x53\x9c\xcd\xaf\xd2\x9a\x76\x0a\x15\xe0\x69\x7c\x6d\x12\x4f\x44\x67\x8e\x6d\x29\xb8\xb4\xde\xa2\x0e\x8d\x53\x68\x1f\x9d\x5f\x0d\x78\xd8\xbc\xfd\x7e\xfe\x30\x98\xfd\x1e\xb4\xe1\x70\x22\x6b\x0d\x3e\x74\x5c\x0b\x7d\x03\x39\xa1\x76\x21\x2b\x82\x7c\x30\x08\x8d\x99\x46\xe7\x87\x98\xc8\xab\x98\xd5\x28\x52\x38\xef\xb0\xa2\xf7\x7d\x43\x0c\x4a\xce\xc2\xbd\xc0\x0c\x8a\x0c\xf5\x3d\x25\x83\x8f\xfe\xac\x7c\x3f\xfc\x8a\xe4\x09\xf7\x9a\xe9\xdc\xfd\x5e\x76\x35\xbf\x8d\xc8\x83\xc1\x3e\xb5\x9f\x9d\xb5\xa9\x13\xd5\x1f\x29\x39\x0b\x13\xfa\xf9\xe6\x4a\xc6\xff\xfd\x84\xb3\x8a\xa8\xbf\xe9\x6b\x11\x8b\xf4\x59\x78\xf3\xa8\x77\x85\xdf\x4e\x7e\x30\x61\xfe\x1f\x00\x00\xff\xff\xa6\xc5\x06\x22\x24\x28\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 10276, mode: os.FileMode(493), modTime: time.Unix(1700032665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
